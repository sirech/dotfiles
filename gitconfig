# -*- mode: Shell-script-*-
#
# Configuration file for git.
#
# Credit
# - http://stackoverflow.com/questions/267761/what-does-your-gitconfig-contain
# - Gary Bernhardt
# - http://yanpritzker.com/git-book/
#
# Author: Mario Fernandez

[user]
        name = Mario Fernandez
        # Set up this manually, as the email can vary between machines
        #email = username@mydomain.com

[color]
        diff = auto
        status = auto
        branch = auto
        interactive = auto
        ui = true
        pager = true

[color "branch"]
        current = yellow reverse
        local = yellow
        remote = green

[color "diff"]
        meta = yellow bold
        frag = magenta bold
        old = red bold
        new = green bold

[color "status"]
        added = yellow
        changed = green
        untracked = cyan

[core]
        editor = emacsclient
        pager = less -FRSX
        whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol

[diff]
        # Make diffs shorter when moving/copying files
        rename = copy

[merge]
        summary = true
[gc]
        auto = 1

# The abbreviations are based on SVN. Other useful commands are also
# here
[alias]

        st = status

        # commit
        ci = commit -v
        ca = commit -v -a
        amend = commit --amend

        # checkout
        co = checkout

        # cherry pick
        cp = cherry-pick -x

        # add
        aa = add --all
        au = !git add $(git ls-files -o --exclude-standard)

        # diff
        di = diff
        dh = diff HEAD
        dc = diff --cached
        w = whatchanged

        info = config --list

        # log
        rdi = log --no-merges --stat @{1}..
        lg = log --graph --pretty=format':%C(yellow)%h%Cred%d%Creset %s %C(cyan) %an, %ar%Creset'

        # Creates/deletes the current branch at the remote origin repo
        publish = !sh -c 'CURRENT=$(git symbolic-ref HEAD | sed -e s@.*/@@) \
            && git push --set-upstream origin $CURRENT:$CURRENT'
        unpublish = !sh -c 'CURRENT=$(git symbolic-ref HEAD | sed -e s@.*/@@) \
            && git push origin :$CURRENT'

        # gitk
        kconflict = !gitk --left-right HEAD...MERGE_HEAD
        history-all = !gitk --all $( git fsck | awk '/dangling commit/ {print $3}' )

        # Search for a given string in all patches and print commit messages
        # example: search for any commit that adds or removes string "foobar"
        #     git searchcommits foobar
        # example: search commits for string "foobar" in directory src/lib
        #     git searchcommits foobar src/lib
        # example: search commits for "foobar", print full diff of commit with 1 line context
        #     git searchcommits foobar --pickaxe-all -U1 src/lib
        searchcommits = "!f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""

        # revert
        unstage = reset HEAD
        uncommit = reset --soft HEAD^
